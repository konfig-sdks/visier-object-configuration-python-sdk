# coding: utf-8

"""
    Visier Object Configuration APIs

    Visier APIs for managing objects in studio experience

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from visier_object_configuration_python_sdk.pydantic.analytic_object_filter_dto import AnalyticObjectFilterDTO

class PerspectiveNodeDTO(BaseModel):
    # The UUID of the node's selection concept. Perspective nodes are generated as selection concepts to enable filtering.
    selection_concept_uuid: typing.Optional[str] = Field(None, alias='selectionConceptUuid')

    # The symbol name of the selection concept. For example, \"isExitActualSystemTermination\".
    symbol_name: typing.Optional[str] = Field(None, alias='symbolName')

    # A list of analytic object filters indicating the analytic object and dimensions used for the selection concept.
    analytic_object_filters: typing.Optional[typing.List[AnalyticObjectFilterDTO]] = Field(None, alias='analyticObjectFilters')
    class Config:
        arbitrary_types_allowed = True
